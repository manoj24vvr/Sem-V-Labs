1.
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>

//########################################
// Title:  exer1
// Description:
// Author: Aaron Dsouza
// Reg No.: 200968008
// Date:  08/26/22
//########################################
//*  Start  *
int main(){
        pid_t pid;
        pid=fork();
        if (pid<0){
                fprintf(stderr, "Fork Failed");
                exit(-1);
        }
        else if(pid==0){
                execlp("/bin/ls","ls",NULL);
        }
        else{
                wait(NULL);
                printf("Child Complete");
                exit(0);
        }
}
//*  End  *

2.
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>

//########################################
// Title:  exer2
// Description:
// Author: Aaron Dsouza
// Reg No.: 200968008
// Date:  08/26/22
//########################################
//*  Start  *
int main(){
        pid_t pid;
        pid=fork();

        if (pid<0){
                fprintf(stderr, "Fork Failed");
                exit(-1);
        }
        else if(pid==0){
                printf("PID of New Child Process: %d\n", getpid());
                printf("PID of its Parent Process: %d\n", getppid());
        }
        else{
                wait(NULL);
                printf("Child Complete\n");
                printf("PID of Main Process: %d\n", getpid());
                printf("PID of Parent of Main Process: %d\n", getppid());
                exit(0);
        }
}
//*  End  *

3.
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>

//########################################
// Title:  exer3
// Description:
// Author: Aaron Dsouza
// Reg No.: 200968008
// Date:  08/26/22
//########################################
//*  Start  *
int main(){
        int n,arr[20],i,j,min;
        printf("Enter array size: ");
        scanf("%d", &n);
        printf("Enter Array Elements: ");
        for(i=0;i<n;i++)
                scanf("%d",&arr[i]);
        pid_t pid;
        pid=fork();
        if(pid < 0){
                fprintf(stderr,"Fork Failed");
                exit(-1);
        }
        else if(pid == 0){
                for(i=0;i<n;i++){
                        min=i;
                        for(j=i+1;j<n;j++){
                                if(arr[j]<arr[min])
                                        min=j;
                        }
                        int temp=arr[i];
                        arr[i]=arr[min];
                        arr[min]=temp;
                }
                printf("The sorted Array: ");
                for(i=0;i<n;i++)
                        printf("%d ",arr[i]);
                printf("\n");
        }
        else{
                printf("The Array: ");
                for(i=0;i<n;i++)
                        printf("%d ",arr[i]);
                printf("\n");
                wait(NULL);
                printf("Child Complete\n");
        }
	return 0;
}

//*  End  *


4.
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>

//########################################
// Title:  exer4
// Description:
// Author: Aaron Dsouza
// Reg No.: 200968008
// Date:  08/26/22
//########################################
//*  Start  *
int main(){
        pid_t pid;
        printf("PID of Main Process: %d\n", getpid());

        pid=fork();

        if(pid<0){
                fprintf(stderr,"Fork Failed");
                exit(-1);
        }
        else if(pid==0){
                printf("Child Process just created\n");
                printf("PID of Child Process: %d\n",getpid());
                printf("PID of Parent Process: %d\n",getppid());
                sleep(5);
                printf("After Parent process is died\n");
                printf("PID of Child Process: %d\n",getpid());
                printf("PID of Child Process: %d\n",getppid());
        }
        else{
                printf("Parent process\n");
        }
        return 0;

}
//*  End  *

5.
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>

//########################################
// Title:  exer5
// Description:
// Author: Aaron Dsouza
// Reg No.: 200968008
// Date:  08/26/22
//########################################
//*  Start  *
int main(){
        pid_t pid;
        pid = fork();
        if(pid<0){
                fprintf(stderr,"Fork Failed");
                exit(-1);
        }
        else if(pid==0){
                execlp("/bin/ls","ls",NULL);
        }
        else{
                wait(NULL);
                printf("Child Complete");
                ecit(0);
        }
        return 0;
}
//*  End  *