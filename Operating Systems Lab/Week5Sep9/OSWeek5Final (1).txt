
//C Program to simulate FCFS
#include<stdio.h>
void main(){
int bt[10]={0},at[10]={0},tat[10]={0},wt[10]={0},ct[10]={0}; 
int n,sum=0;
float totalTAT=0,totalWT=0;
printf("Enter number of processes: ");
scanf("%d",&n);
printf("Enter Arrival time and Burst time for each process:\n");
for(int i=0;i<n;i++){
printf("Arrival time of process[%d]: ",i+1);
scanf("%d",&at[i]);
printf("Burst time of process[%d]: ",i+1);
scanf("%d",&bt[i]);
}
for(int j=0;j<n;j++){
sum+=bt[j];
ct[j]+=sum;
}
for(int k=0;k<n;k++)
{
tat[k]=ct[k]-at[k];
totalTAT+=tat[k];
}
for(int k=0;k<n;k++){
wt[k]=tat[k]-bt[k];
totalWT+=wt[k];
}
printf("P#\t AT\t BT\t CT\t TAT\t WT\t\n\n");
for(int i=0;i<n;i++){
printf("P%d\t %d\t %d\t %d\t %d\t %d\n",i+1,at[i],bt[i],ct[i],tat[i],wt[i]);
}
printf("\nAverage Turnaround Time = %f\n",totalTAT/n);
printf("Average WT = %f\n\n",totalWT/n);
}


-----------

#SRTF   

#include<stdio.h>
int main()
{
int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,pos,temp;
float avg_wt,avg_tat;
printf("Enter number of process:");
scanf("%d",&n);
printf("\nEnter Burst Time:\n");
for(i=0;i<n;i++)
{
printf("p%d:",i+1);
scanf("%d",&bt[i]);
p[i]=i+1;         
}
for(i=0;i<n;i++){
pos=i;
for(j=i+1;j<n;j++){
if(bt[j]<bt[pos])
pos=j;
}
temp=bt[i];
bt[i]=bt[pos];
bt[pos]=temp;
temp=p[i];
p[i]=p[pos];
p[pos]=temp;
} 
wt[0]=0;            
for(i=1;i<n;i++){
wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
total+=wt[i];
}
avg_wt=(float)total/n;      
total=0;
printf("\nProcess\t    Burst Time    \tWaiting Time\tTurnaround Time");
for(i=0;i<n;i++){
tat[i]=bt[i]+wt[i];   
total+=tat[i];
printf("\np%d\t\t  %d\t\t    %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
}
avg_tat=(float)total/n;    
printf("\n\nAverage Waiting Time=%f",avg_wt);
printf("\nAverage Turnaround Time=%f\n",avg_tat);
}
--------------------------------------

// SJF Scheduling algorithm

#include<stdio.h>
#include<stdlib.h>
void swap(int *x, int *y)
{
int temp=*x;
*x=*y;
*y=temp;
}
void sortat(int p[], int at[], int bt[], int n)
{
int i, j;
for(i=0;i<n;i++){
for(j=i+1;j<n;j++){   
if(at[i]>at[j]){
swap(&p[i], &p[j]);
swap(&at[i], &at[j]);
swap(&bt[i], &bt[j]);
}
else if(at[i]==at[j]){
if(bt[i]>bt[j])
swap(&p[i], &p[j]);
swap(&at[i], &at[j]);
swap(&bt[i], &bt[j]);
                        }
                }
        }
}
void tatwt( int ct[], int at[], int bt[], int tat[], int wt[], int n)
{
int i;
for(i=0;i<n;i++){
tat[i]=ct[i]-at[i];
wt[i]=tat[i]-bt[i];
 }
}
int main()
{
int *p, *at, *bt, *tat, *wt, *ct, pos, i, j, min=1000, n;
float awt=0, atat=0;
printf("\nenter the number of process:");
scanf("%d", &n);
p=(int*)malloc(n*sizeof(int));
at=(int*)malloc(n*sizeof(int));
bt=(int*)malloc(n*sizeof(int));
ct=(int*)malloc(n*sizeof(int));
wt=(int*)malloc(n*sizeof(int));
tat=(int*)malloc(n*sizeof(int));
printf("enter the process");
for(i=0;i<n;i++){
scanf("%d",&p[i]);
}
printf("enter the arrival time");
for(i=0;i<n;i++){
scanf("%d",&at[i]);
}
printf("enter the burst time");
for(i=0;i<n;i++){
scanf("%d",&bt[i]);
}
sortat(p, at, bt, n);
ct[0]=at[0] + bt[0];
for(i=1; i<n; i++){
for(j=i; j<n; j++){
if(at[j]<=ct[i-1]){
if(bt[j]<min){
min=bt[j];
pos=j;
}
}
}
swap(&p[i], &p[pos]);
swap(&at[i], &at[pos]);
swap(&bt[i], &bt[pos]);
min=1000;
ct[i]=ct[i-1]+bt[i];
}
tatwt(ct, at, bt, tat, wt, n);
printf("\np\t at\t bt\t ct\t tat\t wt");
for(i=0;i<n;i++){
printf("\n%d\t %d\t %d\t %d\t %d\t %d",p[i], at[i], bt[i], ct[i], tat[i], wt[i]);
}
for(i=0;i<n;i++){
atat+=tat[i];
awt+=wt[i];
}
atat=atat/n;
awt=awt/n;
printf("\n avg tat=%.2f and avg wt=%.2f",atat, awt);
return 0;
}



\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


#include<stdio.h>

int main() {
        int pid[3], at[3], bt[3];
        printf("Enter the Process IDs: ");
        for(int i = 0; i < 3; i++)
                scanf("%d", &pid[i]);
        printf("Enter the arrival times: ");
        for(int i = 0; i < 3; i++)
                scanf("%d", &at[i]);
        printf("Enter the burst times: ");
        for(int i = 0; i < 3; i++)
                scanf("%d", &bt[i]);
        //SJF
        int order[3] = {1,2,3}, bt_copy[3];
        for(int i = 0; i < 3; i++)
                bt_copy[i] = bt[i];
        for(int i = 0; i < 3 - 1; i++)
                for(int j = 0; j < 3 - i - 1; j++)
                        if(bt_copy[j] > bt_copy[j+1]) {
                                int temp = bt_copy[j];
                                bt_copy[j] = bt_copy[j+1];
                                bt_copy[j+1] = temp;
                                temp = order[j];
                                order[j] = order[j+1];
                                order[j+1] = temp;
                        }
        int finish_time[3], wt[3], tat[3], time = 0;
        for(int i = 0; i < 3; i++) {
                int curr = order[i];
                wt[curr-1] = time;
                time += bt[curr-1];
                finish_time[curr-1] = time;
                tat[curr-1] = wt[curr-1] + bt[curr-1];
        }
        float avgwt = (wt[0] + wt[1] + wt[2]) / 3.0;
        float avgtat = (tat[0] + tat[1] + tat[2]) / 3.0;
        printf("Finish times: ");
        for(int i = 0; i < 3; i++)
                printf("%d ", finish_time[i]);
        printf("\nWaiting times: ");
        for(int i = 0; i < 3; i++)
                printf("%d ", wt[i]);
        printf("\nTurn Around times: ");
        for(int i = 0; i < 3; i++)
                printf("%d ", tat[i]);
        printf("\nAverage waiting time: %.2f", avgwt);
        printf("\nAverage turn around time: %.2f \n", avgtat);
	return 0;
}
---------------------------------------

RR

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>  
#include <sys/wait.h>   
#include <unistd.h>     
typedef struct{
int pid;
int arrival_time;
int burst_time;
int rem_time;
int priority;
}Process;
Process* Entry(){
printf("Enter the number of processes:");
int n;
scanf("%d", &n);
Process* p = (Process*) malloc( n+1 * sizeof(Process) );
printf("Enter PID, arrival, burst, Priority ( Enter 0 for default )\n");
for(int i=0;i<n;i++){
printf("Process %d :",i+1);
scanf("%d %d %d %d", &p[i].pid, &p[i].arrival_time, &p[i].burst_time, &p[i].priority);
p[i].rem_time=p[i].burst_time;
}
p[n].pid=-1;
return p;
}
int min(Process *p, int n, int timer){
int min_time=9999;
int min=-1;
for(int i=0;i<n;i++){
if(p[i].arrival_time<=timer && p[i].rem_time>0 && p[i].burst_time<min_time){
min_time=p[i].burst_time;
min=i;
}
}
return min;
}
void RR(){
Process* p = Entry();
int n=0;
while(p[n].pid!=-1)
n++;
int q;
printf("Enter time slice:");
scanf("%d", &q);
int timer=0;
int done=0;
float TAT=0;
float WAT=0;
while(done!=n){
for(int i=0;i<n;i++){
int count=q;
int start=timer;
while(p[i].rem_time>0 && p[i].arrival_time<=timer && count>0){
timer++;
p[i].rem_time--;
count--;
}
if(start!=timer){
printf("%d -> (%d %d)\n", p[i].pid, start, timer);
if(p[i].rem_time==0){
TAT+=(timer-p[i].arrival_time);
WAT+=(timer-p[i].arrival_time-p[i].burst_time);;
done++;
}
}
}
}
TAT=TAT/n;
WAT=WAT/n;
printf("Turnaround Time = %0.2f ms \n", TAT);
printf("Waiting Time = %0.2f ms\n\n\n", WAT);
}

int comparator(const void* p, const void* q) { 
return ((Process*)p)->arrival_time > ((Process*)q)->arrival_time && ((Process*)p)->priority > ((Process*)q)->priority;
}



int main(){
RR();
}

------------------------------------
preemptive priority

#include<stdio.h>
struct priority_scheduling{
char process_name;
int burst_time;
int waiting_time;
int turn_around_time;
int priority;
 };
int main()
{
int number_of_process;
int total=0;
struct priority_scheduling temp_process;
int ASCII_number=65;
int position;
float average_waiting_time;
float average_turnaround_time;
printf("Enter the total number of Processes: ");
scanf("%d",&number_of_process);
struct priority_scheduling process[number_of_process];
printf("\nPlease Enter the  Burst Time and Priority of each process:\n");
for(int i=0;i<number_of_process;i++){
process[i].process_name=(char)ASCII_number;
printf("\nEnter the details of the process %c \n", process[i].process_name);
printf("Enter the burst time: ");
scanf("%d",&process[i].burst_time);
printf("Enter the priority: ");
scanf("%d",&process[i].priority);
ASCII_number++;       
}
for(int i=0;i<number_of_process;i++){
position=i;
for(int j=i+1;j<number_of_process;j++)
{
if(process[j].priority>process[position].priority)
position=j;
}
temp_process=process[i];
process[i]=process[position];
process[position]=temp_process;
}
process[0].waiting_time=0; 
for(int i=1;i<number_of_process;i++){
process[i].waiting_time=0;
for(int j=0;j<i;j++){
process[i].waiting_time+=process[j].burst_time;
}
total+=process[i].waiting_time;
}
average_waiting_time=(float)total/(float)number_of_process;      
total=0;
printf("\n\nProcess_name \t Burst Time \t Waiting Time \t  Turnaround Time\n");
printf("------------------------------------------------------------\n");
for(int i=0;i<number_of_process;i++){
process[i].turn_around_time=process[i].burst_time+process[i].waiting_time;  
total+=process[i].turn_around_time;
printf("\t  %c \t\t\t  %d \t\t\t %d \t\t\t\t %d",process[i].process_name,process[i].burst_time,process[i].waiting_time,process[i].turn_around_time);
printf("\n-----------------------------------------------------------\n");
}
average_turnaround_time=total/number_of_process;     
printf("\n\n Average Waiting Time :%f",average_waiting_time);
printf("\n Average Turnaround Time: %f\n",average_turnaround_time);
return 0;
}

-------------

non preemptive priority 

#include <stdlib.h>
#include <stdio.h>
void main()
{
int pn = 0;                 
int CPU = 0;            
int allTime = 0;       
printf("Enrer Processes Count: ");
scanf("%d",&pn);
int AT[pn];
int ATt[pn];
int NoP = pn;
int PT[pn];            
int PP[pn];            
int PPt[pn];
int waittingTime[pn];
int turnaroundTime[pn];
int i=0;
for(i=0 ;i<pn ;i++){
printf("\nProcessing time for P%d: ",i+1);
scanf("%d",&PT[i]);
printf("Piriorty for P%d: ",i+1);
scanf("%d",&PP[i]);
PPt[i] = PP[i];
printf("Arrival Time for P%d: ",i+1);
scanf("%d",&AT[i]);
ATt[i] = AT[i];
}
int LAT = 0;        
for(i = 0; i < pn; i++)
if(AT[i] > LAT)
LAT = AT[i];
int MAX_P = 0;        
for(i = 0; i < pn; i++)
if(PPt[i] > MAX_P)
MAX_P = PPt[i];
int ATi = 0;       
int P1 = PPt[0];     
int P2 = PPt[0];     
int j = -1;
while(NoP > 0 && CPU <= 1000){
for(i = 0; i < pn; i++){
if((ATt[i] <= CPU) && (ATt[i] != (LAT+10))){
if(PPt[i] != (MAX_P+1)){
P2 = PPt[i];
j= 1;
if(P2 < P1){
j= 1;
ATi = i;
P1 = PPt[i];
P2 = PPt[i];
}
}
}}

if(j == -1){
CPU = CPU+1;
continue;
}else{
waittingTime[ATi] = CPU - ATt[ATi];
CPU = CPU + PT[ATi];
turnaroundTime[ATi] = CPU - ATt[ATi];
 ATt[ATi] = LAT +10;
j = -1;
PPt[ATi] = MAX_P + 1;
ATi = 0;        
P1 = MAX_P+1;   
P2 = MAX_P+1;     
NoP = NoP - 1;
}
}
printf("\nPN\tPT\tPP\tAT\tWT\tTT\n\n");
for(i = 0; i < pn; i++){
printf("P%d\t%d\t%d\t%d\t%d\t%d\n",i+1,PT[i],PP[i],AT[i],waittingTime[i],turnaroundTime[i]);
}
int AvgWT = 0;
int AVGTaT = 0;
for(i = 0; i < pn; i++){
AvgWT = waittingTime[i] + AvgWT;
AVGTaT = turnaroundTime[i] + AVGTaT;
}
printf("AvgWaittingTime = %d\nAvgTurnaroundTime = %d\n",AvgWT/pn,AVGTaT/pn);
}
